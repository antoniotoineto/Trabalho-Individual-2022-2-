name: main_CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Checking Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Installing poetry
      run: |
        python3 -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Installing dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Running docker commands
      run: docker-compose up -d

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Checking Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'        

    - name: Testing with Pytest
      run: |
        python3 -m pip install --upgrade pip
        pip install pytest
        pip install pytest-cov
        pytest ./tests
      continue-on-error: true
      
    - name: Clean code using Lint with flake8
      run: |
        python3 -m pip install --upgrade pip
        pip install flake8 pytest-cov
        pip install flake8
        flake8 ./src
      continue-on-error: true
       

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Checking Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Installing poetry
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install poetry
        poetry install

    - name: Configuring and publishing poetry
      #env:
      # username: ${{secrets.PYPI_LOGIN}}
      #  password: ${{secrets.PYPI_LOGIN_PASSWORD}}
      run:
        poetry config http-basic.pypi ${{ secrets.PYPI_LOGIN }} ${{ secrets.PYPI_LOGIN_PASSWORD }}
        poetry build
        poetry publish

